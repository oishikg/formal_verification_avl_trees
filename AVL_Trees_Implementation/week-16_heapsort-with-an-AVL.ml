(* week-16_heapsort-with-an-AVL.ml *)
(* Introduction to Data Structures and Algorithms (YSC2229), Sem2, 2017-2018 *)
(* Olivier Danvy <danvy@yale-nus.edu.sg> *)
(* Version of Tue 01 May 2018 *)

(* ********** *)

let show_int n =
  if n < 0
  then "~" ^ string_of_int n
  else string_of_int n;;

let show_array show_yourself a =
  let length_of_a = Array.length a
  in let rec loop i =
       if i = length_of_a
       then "|]"
       else "; " ^ show_yourself a.(i) ^ loop (i + 1)
     in if length_of_a = 0
        then "[||]"
        else "[|" ^ show_yourself a.(0) ^ loop 1;;

(* ********** *)

let log2 n =
  log n /. log 2.;;

(* ********** *)

(* The goal of this mini-project is to implement a heapsort function that uses AVLs,
   i.e., ordered and balanced binary trees.
   At the beginning of the semester, we represented AVLs
   as binary trees indexed with their height that are both

   * ordered
     (traversing them depth first and from left to right gives a list of increasing payloads)
  
   * and balanced
     (for any node, the heights of the left subtree and of the right subtree differ by at most 1)

   using the following data type:
*)

type 'a heightened_binary_tree = int * 'a binary_tree
 and 'a triple = 'a heightened_binary_tree * 'a * 'a heightened_binary_tree
 and 'a binary_tree = Leaf
                    | Node of 'a triple;;

(* Here, we represent an AVL not with the data type above but with two arrays
   of the same length, assuming they are big enough to contain all the payloads of the AVL:
*)

type 'a avl = Avl of int array * 'a array;;

(* The invariants are as follows,
   naming the first array ta (for "type array") containing non-negative integers
   and the second array pa (for "payload array") containing the payloads.
   At index i, ta.(i) and pa.(i) represent a sub-avl:

   * ta.(i) contains the height of this AVL
     (0 if it is a leaf, a positive integer if it is a node)

   * if ta.(i) = 0, pa.(0) is unspecified (and thus can be any integer)

   * if ta.(i) > 0,

     - pa.(i) contains the payload of the node

     - the left sub-avl is at index 2*i + 1

     - the right sub-avl is at index 2*i + 2
*)

let show_avl show_yourself (Avl (ta, pa)) =
  "Avl (" ^ show_array show_yourself ta ^ ", " ^ show_array show_yourself pa ^ ")";;

(* ********** *)

(* a. Implement a conversion function h2a of type
        'a heightened_binary_tree -> 'a avl
      that maps an AVL represented as at the beginning of the semester
      into an AVL represented as a pair of arrays that are as small as possible.
*)

let test_h2a_int candidate =
  let a = [|(candidate (0, Leaf),
             Avl ([||], [||]));

            (candidate (1, Node ((0, Leaf), 10, (0, Leaf))),
             Avl ([|1|], [|10|]));

            (candidate (2, Node ((0, Leaf), 20, (1, Node ((0, Leaf), 30, (0, Leaf))))),
             Avl ([|2; 0; 1|], [|20; 0; 30|]));
            (candidate (2, Node ((1, Node ((0, Leaf), 10, (0, Leaf))), 20, (0, Leaf))),
             Avl ([|2; 1; 0|], [|20; 10; 0|]));
            (candidate (2, Node ((1, Node ((0, Leaf), 10, (0, Leaf))), 20, (1, Node ((0, Leaf), 30, (0, Leaf))))),
             Avl ([|2; 1; 1|], [|20; 10; 30|]));

            (candidate (3, Node ((2, Node ((1, Node ((0, Leaf), 10, (0, Leaf))), 20, (0, Leaf))), 40, (1, Node ((0, Leaf), 60, (0, Leaf))))),
             Avl ([|3; 2; 1; 1; 0; 0; 0|], [|40; 20; 60; 10; 0; 0; 0|]));
          |]
  in let length_of_a = Array.length a in
     let rec traverse i =
       if i = length_of_a
       then true
       else let (actual, expected) = a.(i)
            in (if actual = expected
               then ()
               else Printf.printf "\n%s\nis not the expected%s\n"
                                  (show_avl show_int actual)
                                  (show_avl show_int expected));
               traverse (i + 1)
     in traverse 0;;

(* N.B.: the left-hand side of these tests was generated by evaluating

   insert_list insert show_int compare_int [] (obt_to_hbt OLeaf);;

   insert_list insert show_int compare_int [10] (obt_to_hbt OLeaf);;

   insert_list insert show_int compare_int [20; 10] (obt_to_hbt OLeaf);;

   insert_list insert show_int compare_int [20; 40; 60; 10] (obt_to_hbt OLeaf);;

   insert_list insert show_int compare_int [20; 40; 60; 30] (obt_to_hbt OLeaf);;

   insert_list insert show_int compare_int [20; 40; 60; 50] (obt_to_hbt OLeaf);;

   insert_list insert show_int compare_int [20; 40; 60; 70] (obt_to_hbt OLeaf);;
*)

(* ********** *)

(* b. Implement a conversion function a2h of type
        'a avl -> 'a heightened_binary_tree
      that maps an AVL represented as a pair of arrays
      into an AVL represented as at the beginning of the semester.
*)

(* ********** *)

(* You are now in position to piggy-back on the code from the beginning of the semester.
   For example,

   - to check whether a given AVL is ordered, compose a2h and is_ordered

   - to check whether a given AVL is balanced, compose a2h and is_balanced

   - to insert an element in a given AVL, compose a2h, insert, and h2a
*)

(* ********** *)

(* c. Implement an OCaml function that inserts an element in an AVL,
      without using the conversion functions a2h and h2a.
      If the arrays are too small, your function should raise an exception.

   Hints:

   - mimic the insertion function we implemented at the beginning of the semester

   - use h2a and a2h to piggyback on the unit-test functions defined at the beginning of the semester
*)

(* ********** *)

(* d. Implement an OCaml function that extracts an ordered list from an AVL
      that is ordered and balanced,
      without using the conversion functions a2h and h2a.
*)

(* ********** *)

(* e. Implement a heapsort function that given a comparison function and a list of distinct integers to sort,

      (0) creates an AVL tree with two arrays that are big enough to hold all the integers,
      (1) successively inserts all the elements of the given list in this AVL, and
      (2) extracts the corresponding ordered list from the resulting AVL.

   Compare the efficiency of your sorting function with that of OCaml's List.sort functions.
*)

(* ********** *)

(* end of week-16_heapsort-with-an-AVL.ml *)

"week-16_heapsort-with-an-AVL.ml"
